#!/usr/bin/env node

/**
 * Google Analytics Setup Script
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç GA_MEASUREMENT_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã ID –≤ —Ñ–∞–π–ª–µ
function replaceMeasurementId(filePath, oldId, newId) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const oldContent = content;
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
    content = content.replace(new RegExp(oldId, 'g'), newId);
    
    if (content !== oldContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
      return true;
    } else {
      console.log(`‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤: ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Measurement ID
function validateMeasurementId(id) {
  // GA4 Measurement ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å G- –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ G-
  const pattern = /^G-[A-Z0-9]{10}$/;
  return pattern.test(id);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function setupGoogleAnalytics() {
  console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Analytics –¥–ª—è Penrose Tiles Generator\n');
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Measurement ID
  const measurementId = await new Promise((resolve) => {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GA4 Measurement ID (—Ñ–æ—Ä–º–∞—Ç: G-XXXXXXXXXX): ', (answer) => {
      resolve(answer.trim());
    });
  });
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID
  if (!validateMeasurementId(measurementId)) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Measurement ID!');
    console.log('   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: G-XXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä: G-ABC123DEF4)');
    rl.close();
    return;
  }
  
  console.log(`\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å Measurement ID: ${measurementId}\n`);
  
  // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const filesToUpdate = [
    'index.html',
    'analytics.js'
  ];
  
  let updatedFiles = 0;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (const file of filesToUpdate) {
    const filePath = path.join(__dirname, file);
    
    if (fs.existsSync(filePath)) {
      const success = replaceMeasurementId(filePath, 'GA_MEASUREMENT_ID', measurementId);
      if (success) {
        updatedFiles++;
      }
    } else {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedFiles} –∏–∑ ${filesToUpdate.length} —Ñ–∞–π–ª–æ–≤`);
  
  if (updatedFiles > 0) {
    console.log('\n‚úÖ Google Analytics –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤ Google Analytics DebugView');
    console.log('4. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git');
    
    console.log('\nüß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('   python -m http.server 8000');
    console.log('   –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000');
    
    console.log('\nüöÄ –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:');
    console.log('   git add .');
    console.log('   git commit -m "Configure Google Analytics"');
    console.log('   git push origin main');
  } else {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤.');
  }
  
  rl.close();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  setupGoogleAnalytics().catch(console.error);
}

module.exports = { setupGoogleAnalytics, replaceMeasurementId, validateMeasurementId };
